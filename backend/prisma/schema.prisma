generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())   // auto incremento id primary key
  email         String   @unique                         // email único
  password      String                                  // contraseña  
  role          String                                  // rol del usuario (admin, cliente, empleado)
  nombre        String                                  // nombre del usuario    
  especialidad  String?                                 // especialidad del empleado "?" significa que es opcional         
  createdAt     DateTime @default(now())                // fecha de creación del usuario; se asigna automáticamente al momento de crearlo

  turnosCliente  Turno[] @relation("TurnosCliente")     // relación de uno a muchos con Turno; un cliente puede tener muchos turnos
  turnosEmpleado Turno[] @relation("TurnosEmpleado")    // relación de uno a muchos con Turno; un empleado puede tener muchos turnos
}

model Servicio {
  id          Int      @id @default(autoincrement())    // auto incremento id primary key
  nombre      String                                    // nombre del servicio
  descripcion String                                    // descripción del servicio
  precio      Float                                     // precio del servicio en float 
  duracion    Int                                       // duración del servicio EN HORAS
  turnos      Turno[]                                   // relación de uno a muchos con Turno; un servicio puede tener muchos turnos
}

model Turno {
  id          Int       @id @default(autoincrement())   // auto incremento id primary key
  fechaHora   DateTime                                  // fecha y hora del turno (elegida por el cliente o el admin)
  estado      String    @default("disponible")          // estado del turno (disponible, reservado, cancelado); valor por defecto: "disponible"

  cliente     User?     @relation("TurnosCliente", fields: [clienteId], references: [id])  // relación con User; un turno puede tener un cliente (opcional)
  clienteId   Int?                                      // id del cliente; puede ser nulo si no hay cliente asignado

  empleado    User      @relation("TurnosEmpleado", fields: [empleadoId], references: [id]) // relación con User; un turno debe tener un empleado asignado
  empleadoId  Int                                       // id del empleado; no puede ser nulo

  servicio    Servicio  @relation(fields: [servicioId], references: [id])  // relación con Servicio; un turno debe tener un servicio asignado
  servicioId  Int                                       // id del servicio; no puede ser nulo

  createdAt   DateTime  @default(now())                 // fecha de creación del turno; se asigna automáticamente al crear el registro
}
